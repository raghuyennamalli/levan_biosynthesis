solverName = 'glpk';
solverType = 'LP';

changeCobraSolver(solverName, solverType);
model = changeRxnBounds(model, 'EX_glc(e)', -18, 'l');

[grRatio, grRateKO, grRateWT, delRxns,...
hasEffect] = singleGeneDeletion(model, 'FBA', model.genes);
essential_genes = [];
non_EG = [];
tol = 1e-6;
for n = 1:length(grRateKO)
if (grRateKO(n)<tol)||(isnan(grRateKO(n))==1)
essential_genes = [essential_genes; model.genes(n)];
else
non_EG = [non_EG; n];
end
end
% find essential reactions
RxnRatio = singleRxnDeletion(model);
RxnRatio(isnan(RxnRatio)) = 0;
pFBAEssentialRxns = model.rxns(RxnRatio < tol);

[minFluxglc, maxFluxglc] = fluxVariability(model, 0);
pFBAnoFluxRxn = [];
pFBAfluxRxn = [];
for i=1:length(model.rxns)
if (abs(minFluxglc(i))<tol)&&(abs(maxFluxglc(i))<tol)
pFBAnoFluxRxn = [pFBAnoFluxRxn i];
else
pFBAfluxRxn = [pFBAfluxRxn i];
end
end
pFBAfluxRxn = pFBAfluxRxn';
ZeroFluxRxns = model.rxns(pFBAnoFluxRxn)

RxnGMat = full(model.rxnGeneMat);
pFBAfluxGenes = non_EG;
pFBAnoFluxGenes = [];
for i = 1:length(pFBAnoFluxRxn)
listGenes = find(RxnGMat(pFBAnoFluxRxn(i),:));
for n = 1:length(listGenes)
pos = find(non_EG==listGenes(n));
if pos
pFBAnoFluxGenes = [pFBAnoFluxGenes; model.genes(non_EG(pos))];
pFBAfluxGenes(pos) = 0;
end
end
end
pFBAnoFluxGenes = unique(pFBAnoFluxGenes);
pFBAfluxGenes(pFBAfluxGenes==0) = [];

FBAsolution = optimizeCbModel(model, 'max');

model = changeRxnBounds(model, 'BS_Biomass_10', FBAsolution.f, 'l');

[minFlux2, maxFlux2] = fluxVariability(model,95);

RxnMLE = [];
restRxn = [];
for i = 1:length(pFBAfluxRxn)
if (abs(minFlux2(pFBAfluxRxn(i)))<tol)&&(abs(maxFlux2(pFBAfluxRxn(i)))<tol);
RxnMLE = [RxnMLE pFBAfluxRxn(i)];
else
restRxn = [restRxn pFBAfluxRxn(i)];
end
end
RxnMLEname = model.rxns(RxnMLE)

FBAsolution = optimizeCbModel(model,'min','one');
model = changeRxnBounds(model, model.rxns, FBAsolution.x, 'b');

[minFlux3, maxFlux3] = fluxVariability(model, 100);
pFBAopt_Rxns = model.rxns((abs(minFlux3)+abs(maxFlux3))>=tol);
pFBAopt_Rxns = unique(regexprep(pFBAopt_Rxns, '_[f|b]$',''));
pFBAopt_Rxns = setdiff(pFBAopt_Rxns, pFBAEssentialRxns)
ELE_Rxns = model.rxns((abs(minFlux3)+abs(maxFlux3))<=tol);
ELE_Rxns = setdiff(ELE_Rxns, RxnMLEname);
ELE_Rxns = setdiff(ELE_Rxns, ZeroFluxRxns)
RxnELE = findRxnIDs(model, ELE_Rxns);
RxnOptima = findRxnIDs(model, pFBAopt_Rxns);

OptimaGenes = [];
restGenes = pFBAfluxGenes;
for i = 1:length(RxnOptima)
listGenes = find(RxnGMat(RxnOptima(i), :));
for n = 1:length(listGenes)
pos = find(pFBAfluxGenes==listGenes(n));
if pos
OptimaGenes = [OptimaGenes; model.genes(pFBAfluxGenes(pos))];
restGenes(pos,1) = 0;
end
end
end
OptimaGenes = unique(OptimaGenes);
restGenes(restGenes==0) = [];
ELEGenes = [];
restGenes2 = restGenes;
for i = 1:length(RxnELE)
listGenes = find(RxnGMat(RxnELE(i), :));
for n = 1:length(listGenes)
pos = find(restGenes==listGenes(n));
if pos
ELEGenes = [ELEGenes; model.genes(restGenes(pos))];
restGenes2(pos, 1) = 0;
end
end
end
ELEGenes = unique(ELEGenes);
restGenes2(restGenes2==0) = [];
MLEGenes = [];
finalRemainingGenes = restGenes2;
for i = 1:length(RxnMLE)
listGenes = find(RxnGMat(RxnMLE(i),:));
for n = 1:length(listGenes)
pos = find(restGenes2==listGenes(n));
if pos
MLEGenes = [MLEGenes; model.genes(restGenes2(pos))];
finalRemainingGenes(pos, 1) = 0;
end
end
end
MLEGenes = unique(MLEGenes);
finalRemainingGenes(finalRemainingGenes==0) = [];
remainingGenes = [];
for n = 1:length(finalRemainingGenes)
remainingGenes = [remainingGenes; model.genes(finalRemainingGenes(n))];
end

essential_genes
OptimaGenes
ELEGenes
MLEGenes
pFBAnoFluxGenes
